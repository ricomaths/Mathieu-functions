def c_bar(p,n,Pe):
    if n%2==0:
        if p%2==0:
            return (-1)**(n/2)*(-1)**(p/2)*sp.mathieu_even_coef(n,Pe**2/4)[int(p/2)]
        else:
            return 0
    else:
        if p%2==0:
            return 0
        else:
            return (-1)**((n-1)/2)*(-1)**((p-1)/2)*sp.mathieu_odd_coef(n,Pe**2/4)[int((p-1)/2)]

def C(p,n,Pe):
    if p==0:
        return c_bar(p,n,Pe)
    else:
        return c_bar(abs(p),n,Pe)/2.0

def s_bar(p,n,Pe):
    if n%2==0:
        if p%2==0:
            return (-1)**((n-2)/2)*(-1)**((p-2)/2)*sp.mathieu_odd_coef(n,Pe**2/4)[int((p-2)/2)]
        else:
            return 0
    else:
        if p%2==0:
            return 0
        else:
            return (-1)**((n-1)/2)*(-1)**((p-1)/2)*sp.mathieu_even_coef(n,Pe**2/4)[int((p-1)/2)]
        
def S(p,n,Pe):
    iota = complex(0,1)
    if p>0:
        return s_bar(abs(p),n,Pe)/(2*iota)
    if p<0:
        return -s_bar(abs(p),n,Pe)/(2*iota)

# # # # test c_bar and s_bar

# plt.figure()
# theta = np.linspace(0,359,1000)
# n = 5

# plt.plot(theta,sp.mathieu_cem(n,-Pe**2/4,theta)[0],'k',linewidth=2.0)
# suma = np.zeros(len(theta))
# for p in np.arange(0,15,1):
#     suma += c_bar(p,n,Pe)*np.cos(np.pi/180*theta*p)
# plt.plot(theta,suma,'m:',linewidth=3.0)

# plt.grid()
# plt.show()

# # # # test C and S

# plt.figure()
# theta = np.linspace(0,359,1000)
# n = 2

# plt.plot(theta,sp.mathieu_cem(n,-Pe**2/4,theta)[0],'k',linewidth=2.0)
# suma = np.zeros(len(theta),dtype=complex)
# suma += C(0,n,Pe)
# for p in np.arange(1,25,1):
#     suma += C(p,n,Pe)*np.exp(iota*p*theta*np.pi/180) + C(-p,n,Pe)*np.exp(-iota*p*theta*np.pi/180)
# plt.plot(theta,suma.real,'m:',linewidth=3.0)

# plt.grid()
# plt.show()
